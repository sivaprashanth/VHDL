library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;
use IEEE.math_real.all;

entity trial is
--generic (n: integer := 4); 
port(
	clk:in std_logic;
	A: in std_logic_vector(3 downto 0);
	B: in std_logic_vector(3 downto 0);
	Go: in std_logic;
	Quotient :out std_logic_vector(3 downto 0);
	Remainder :out std_logic_vector(3 downto 0);
	
	fmout : out std_logic;
	fmin : in std_logic;
	done : out std_logic
	);
end entity trial;



architecture arch_dividor of trial  is

type states is (s1, S2, S3,s4,s5,s6);
signal Done1 : std_logic; 

signal s : std_logic:='1';
 
signal out1: std_logic_vector(3 downto 0);
signal state_machine: states:= s1;
signal state_machine1: states:= s4;
signal c: integer;	
signal RA, RB:  std_logic_vector(3 downto 0);
signal RR,RQ : std_logic_vector(3 downto 0);


begin

-- FSM Logic with 3 states
seq : process(clk)   
	variable clk_count: integer:=0;
	begin
if(clk'event and clk = '1' and go = '1') then 
case state_machine1 is
				when s4 =>  
				if clk_count = 24000000 then
clk_count:=0;
				state_machine1 <= s5;
				else   
	
				clk_count := clk_count + 1;
end if;

when s5 => 
if clk_count = 24000000 then
clk_count:=0;
state_machine1 <= s6;
				else 
				clk_count := clk_count + 1;
end if;

when s6 => 
if clk_count = 24000000 then
				s<='0';
				clk_count:=0;
				state_machine1 <= s4;  
				else 
				clk_count := clk_count + 1;
end if;

when others =>state_machine1 <= s4;
end case;
end if;
end process seq; 

process(clk)
begin
		
		if(clk'event and clk = '1') then
		if(s='1' or fmin ='1') then
         case state_machine is
				when s1 => 
				done1<='0';
					
					c <= 3;
					RA <= A ;
				     RB <= B;
				if(Go = '1') then
				RR <= "0000";
					Rq <= "0000";
				state_machine <= s2;
				else RA <= A ;
				     RB <= B;
			 end if;
			 
	
	when s2 => 
				RR <= RR ( 2 downto 0 ) & RA (3);
				RA <= RA ( 2 downto 0 ) & "0" ;
		      state_machine <= s3;
			
	when s3 =>
            c <= c-1; 
			
		if (RR >= B) then
	      RQ <= RQ (2 downto 0) & "1";
			RR <= RR - RB;
			   else 
				  RQ <= RQ (2 downto 0) & "0";
				  end if;
				  
			if (c <= 0) then
				done1 <= '1';
				state_machine <= s1;
					else state_machine <= s2;
				end if;
				
				when others => state_machine<=s1;
	end case;
	
	else
	RR <="0000";
	RQ <="0000";
	end if;
	end if;
end process;
done <= done1;
fmout <=s;
		quotient<=rq;
		remainder<=rr;


end architecture arch_dividor;